<?php

/**
 * @file
 * The varbase_heroslider_media.module.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\views\ViewExecutable;
use Drupal\Core\Entity\Entity\EntityViewDisplay;
use Drupal\Core\Url;

/**
 * Implements hook_preprocess_field().
 */
function varbase_heroslider_media_preprocess_field(&$variables) {
  // Provide an extra variable to the field template when the field uses
  // a formatter of type 'foo_formatter'
  $resource_fetcher = \Drupal::service('media.oembed.resource_fetcher');
  $url_resolver = \Drupal::service('media.oembed.url_resolver');
  $iframe_url_helper = \Drupal::service('media.oembed.iframe_url_helper');

  if ($variables['element']['#formatter'] == 'oembed') {

    $entity = $variables['element']['#object'];

    $view_mode = $variables['element']['#view_mode'];
    $field_name = $variables['element']['#field_name'];
    $bundle = $variables['element']['#bundle'];

    // get the field formatter settings...
    $entity_display = EntityViewDisplay::collectRenderDisplay($entity, $view_mode);
    $field_display = $entity_display->getComponent($field_name);

    if ( $bundle == "remote_video" ) {
      $max_width = $field_display['settings']['max_width'];
      $max_height = $field_display['settings']['max_height'];
      $item = $variables['element']["#items"]->first();
      $main_property = $item->getFieldDefinition()->getFieldStorageDefinition()->getMainPropertyName();
      $value = $item->{$main_property};
      $resource_url = $url_resolver->getResourceUrl($value, $max_width, $max_height);
      $resource = $resource_fetcher->fetchResource($resource_url);
      $provider = $resource->getProvider()->getName();
      $url = Url::fromRoute('media.oembed_iframe', [], [
        'query' => [
          'url' => $value,
          'max_width' => $max_width,
          'max_height' => $max_height,
          'type' => "remote_video",
          'provider' => strtolower($provider),
          'view_mode' => $view_mode,
          'hash' => $iframe_url_helper->getHash($value, $max_width, $max_height, $provider, $view_mode),
        ],
      ]);

      $variables['items'][0]['content']['#attributes']['src'] = $url->toString();
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function varbase_heroslider_media_preprocess_media_oembed_iframe(&$variables) {
  // suggestions go here!
  $module_handler = \Drupal::service('module_handler');
  $query = \Drupal::request()->query;
  $variables['type'] = $query->get('type');
  $variables['provider'] = $query->get('provider');
  $variables['view_mode'] = $query->get('view_mode');
  $variables['base_path'] = Url::fromRoute('<front>', [], ['absolute' => TRUE]);
  $variables['varbase_heroslider_media_path'] = $module_handler->getModule('varbase_heroslider_media')->getPath();

}

/**
 * Implements hook_theme_suggestions_media_oembed_iframe_alter().
 */
function varbase_heroslider_media_theme_suggestions_media_oembed_iframe_alter(&$suggestions, &$vars) {
  // suggestions go here!
  $query = \Drupal::request()->query;
  $type = $query->get('type');
  $provider = $query->get('provider');
  $view_mode = $query->get('view_mode');
  if($type && $provider){
    $suggestions[] = "media_oembed_iframe__" . $provider;
    $suggestions[] = "media_oembed_iframe__" . $provider . "__" . $view_mode;
    $suggestions[] = "media_oembed_iframe__" . $type;
    $suggestions[] = "media_oembed_iframe__" . $type . "__" . $view_mode;
    $suggestions[] = "media_oembed_iframe__" . $type . "__" . $provider;
    $suggestions[] = "media_oembed_iframe__" . $type . "__" . $provider . "__" . $view_mode;
  }
}


/**
 * Implements hook_theme().
 */
function varbase_heroslider_media_theme($existing, $type, $theme, $path) {
  return [
    'node__varbase_heroslider_media' => [
      'template' => 'node--varbase-heroslider-media',
      'base hook' => 'node',
    ]
  ];
}
