<?php

/**
 * @file
 * Install, update and uninstall functions for the varbase hero slider media.
 */

use Vardot\Entity\EntityDefinitionUpdateManager;
use Vardot\Installer\ModuleInstallerFactory;

/**
 * Implements hook_install().
 */
function varbase_heroslider_media_install() {

  // Processer for install: in varbase_heroslider_media.info.yml file using ModuleInstallerFactory.
  // --------------------------------------------------------------------------.
  ModuleInstallerFactory::installList('varbase_heroslider_media');

  // Install optional configs.
  ModuleInstallerFactory::importConfigsFromScanedDirectory('varbase_heroslider_media', '/^field.storage.*\\.(yml)$/i');
  ModuleInstallerFactory::importConfigsFromScanedDirectory('varbase_heroslider_media', '/^.*\\.(settings.yml)$/i');

  // --------------------------------------------------------------------------.
  // Entity updates to clear up any mismatched entity and/or field definitions
  // And Fix changes were detected in the entity type and field definitions.
  \Drupal::classResolver()
    ->getInstanceFromDefinition(EntityDefinitionUpdateManager::class)
    ->applyUpdates();

}

/**
 * Implements hook_requirements().
 */
function varbase_heroslider_media_requirements($phase) {

  $requirements = [];

  $path = DRUPAL_ROOT . '/libraries/slick/slick/slick.min.js';

  // Is the library found in the root libraries path.
  $library_found = file_exists($path);

  // If library is not found, then look in the current profile libraries path.
  if (!$library_found) {
    $profile_path = drupal_get_path('profile', \Drupal::installProfile());
    $profile_path .= '/libraries/slick/slick/slick.min.js';
    // Is the library found in the current profile libraries path.
    $library_found = file_exists($profile_path);
  }

  if (!$library_found) {
    $requirements['slick_library'] = [
      'title' => t('Slick library missing'),
      'description' => t('Media Hero Slider requires the slick.min.js library.
        Download it (https://github.com/kenwheeler/slick) and place it in the
        libraries folder (/libraries)'),
      'severity' => REQUIREMENT_ERROR,
    ];
  }

  return $requirements;
}

/**
 * Issue #3175810: Fix deprecated function getCurrentUserId replaced.
 *
 *  By getDefaultEntityOwner in
 *  core.base_field_override.node.varbase_heroslider_media.uid config.
 */
function varbase_heroslider_media_update_8701() {
  $config_factory = \Drupal::service('config.factory');
  $node_uid_configs = $config_factory->listAll('core.base_field_override.node.');

  // Update for core.base_field_override.node.varbase_heroslider_media.uid
  // And all content types.
  foreach ($node_uid_configs as $node_uid_config) {
    if (substr($node_uid_config, -4) === ".uid") {

      $node_uid_config_factory = $config_factory->getEditable($node_uid_config);
      $default_value_callback = $node_uid_config_factory->get('default_value_callback');

      if (isset($default_value_callback)
        && !empty($default_value_callback)
        && $default_value_callback === 'Drupal\node\Entity\Node::getCurrentUserId') {

        $node_uid_config_factory->set('default_value_callback', 'Drupal\node\Entity\Node::getDefaultEntityOwner')->save(TRUE);
      }
    }
  }

}

/**
 * Issue #3272305: Switch to use the Module Installer Factory.
 *
 * In the Varbase Media Hero Slider module.
 */
function varbase_heroslider_media_update_90001() {
  // Set the weight of the module after installation of list of modules.
  // To make sure that any hook or event subscriber workes after all used modules.
  ModuleInstallerFactory::setModuleWeightAfterInstallation('varbase_heroslider_media');
}
